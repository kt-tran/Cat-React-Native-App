{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { useLoggerContext } from \"../contexts/LoggerProvider\";\nimport { HandleGetList } from \"../utilities/api\";\nimport { GetCountries } from \"../utilities/options\";\nimport { Container, NativeBaseProvider, VStack, Heading, Input, Icon, Box, HStack, Text, AspectRatio, Image, Center } from \"native-base\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function SearchScreen() {\n  var _HandleGetList = HandleGetList(),\n    loading = _HandleGetList.loading,\n    list = _HandleGetList.list,\n    error = _HandleGetList.error;\n  var _useState = useState(),\n    _useState2 = _slicedToArray(_useState, 2),\n    choice = _useState2[0],\n    setChoice = _useState2[1];\n  var countries = GetCountries();\n  var options = [{\n    value: \"name\",\n    label: \"Breed\"\n  }, {\n    value: \"origin\",\n    label: \"Country\"\n  }];\n  var countryList = countries.map(function (country) {\n    return {\n      value: country,\n      label: country\n    };\n  });\n  var CountryOptions = countryList;\n  var CatOptions = list.map(function (cat) {\n    return {\n      value: cat.name,\n      label: cat.name\n    };\n  });\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    searchRes = _useState4[0],\n    setSearchRes = _useState4[1];\n  useEffect(function () {\n    setSearchRes(list);\n  }, [list]);\n  var handleChangeCountry = function handleChangeCountry(selectedOption) {\n    var res = [];\n    list.forEach(function (cat) {\n      if (cat.origin === selectedOption.value) {\n        res.push(cat);\n      }\n    });\n    setSearchRes(res);\n  };\n  var handleChangeCat = function handleChangeCat(selectedOption) {\n    var res = [];\n    list.forEach(function (cat) {\n      if (cat.name === selectedOption.value) {\n        res.push(cat);\n      }\n    });\n    setSearchRes(res);\n  };\n  var handleChangeCategory = function handleChangeCategory(selectedOption) {\n    setChoice(selectedOption.value);\n  };\n  layoutCounter = 0;\n  return _jsx(NativeBaseProvider, {\n    children: _jsxs(ScrollView, {\n      centerContent: \"true\",\n      children: [_jsx(Text, {\n        style: styles.header,\n        children: \" Find a cat breed by typing a breed name\"\n      }), _jsx(Input, {\n        placeholder: \"Search\",\n        variant: \"filled\",\n        width: \"100%\",\n        borderRadius: \"10\",\n        py: \"1\",\n        px: \"2\",\n        InputLeftElement: _jsx(Icon, {\n          ml: \"2\",\n          size: \"4\",\n          color: \"gray.400\",\n          as: _jsx(Ionicons, {\n            name: \"ios-search\"\n          })\n        })\n      }), _jsx(Box, {\n        m: 2,\n        children: list.map(function (cat) {\n          return _jsx(Box, {\n            bg: \"white\",\n            shadow: 2,\n            rounded: \"lg\",\n            m: 3,\n            children: _jsxs(HStack, {\n              children: [_jsx(Image, {\n                resizeMode: \"cover\",\n                rounded: \"lg\",\n                source: {\n                  uri: \"https://cdn2.thecatapi.com/images/\" + cat.reference_image_id + \".jpg\"\n                },\n                alt: \"a \" + cat.name + \" cat\",\n                size: \"xl\"\n              }), _jsx(Center, {\n                children: _jsxs(VStack, {\n                  mx: 2,\n                  children: [_jsx(Heading, {\n                    size: \"md\",\n                    children: cat.name\n                  }), _jsx(Heading, {\n                    size: \"sm\",\n                    children: cat.origin\n                  })]\n                })\n              })]\n            })\n          });\n        })\n      })]\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  event: {\n    backgroundColor: \"green\",\n    textAlign: \"center\",\n    padding: 5,\n    borderRadius: 10,\n    margin: 2\n  },\n  header: {\n    textAlign: \"center\",\n    marginVertical: 4\n  }\n});","map":{"version":3,"names":["React","useState","useEffect","StyleSheet","View","ScrollView","useLoggerContext","HandleGetList","GetCountries","Container","NativeBaseProvider","VStack","Heading","Input","Icon","Box","HStack","Text","AspectRatio","Image","Center","Ionicons","jsx","_jsx","jsxs","_jsxs","SearchScreen","_HandleGetList","loading","list","error","_useState","_useState2","_slicedToArray","choice","setChoice","countries","options","value","label","countryList","map","country","CountryOptions","CatOptions","cat","name","_useState3","_useState4","searchRes","setSearchRes","handleChangeCountry","selectedOption","res","forEach","origin","push","handleChangeCat","handleChangeCategory","layoutCounter","children","centerContent","style","styles","header","placeholder","variant","width","borderRadius","py","px","InputLeftElement","ml","size","color","as","m","bg","shadow","rounded","resizeMode","source","uri","reference_image_id","alt","mx","create","container","flex","event","backgroundColor","textAlign","padding","margin","marginVertical"],"sources":["D:/IFN666 Assignment 3/Assignment3/MobileAppAssignment/screens/SearchScreen.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { StyleSheet, View, ScrollView } from \"react-native\";\r\nimport { useLoggerContext } from \"../contexts/LoggerProvider\";\r\nimport { HandleGetList } from \"../utilities/api\";\r\nimport { GetCountries } from \"../utilities/options\";\r\nimport { Container, NativeBaseProvider, VStack, Heading, Input, Icon, Box, HStack, Text, AspectRatio, Image, Center } from \"native-base\";\r\nimport { Ionicons } from \"@expo/vector-icons\";\r\n\r\n\r\n// export default function SearchScreen() {\r\n//     const [log, setLog] = useLoggerContext();\r\n//     return (\r\n//         <View style={styles.container}>\r\n//             <GetData />\r\n//         </View>\r\n//     );\r\n// }\r\n\r\nexport default function SearchScreen() {\r\n    const { loading, list, error } = HandleGetList();\r\n    const [choice, setChoice] = useState();\r\n    const countries = GetCountries();\r\n\r\n    let options = [\r\n        { value: \"name\", label: \"Breed\" },\r\n        { value: \"origin\", label: \"Country\" }\r\n    ]\r\n\r\n    let countryList = countries.map((country) => (\r\n        { value: country, label: country }\r\n    ));\r\n    const CountryOptions = countryList;\r\n\r\n    const CatOptions = list.map((cat) => (\r\n        { value: cat.name, label: cat.name }\r\n    ));\r\n\r\n\r\n    const [searchRes, setSearchRes] = useState([]);\r\n\r\n    useEffect(() => {\r\n        setSearchRes(list);\r\n    }, [list])\r\n\r\n\r\n    const handleChangeCountry = (selectedOption) => {\r\n        let res = []\r\n        list.forEach(cat => {\r\n            if (cat.origin === selectedOption.value) {\r\n                res.push(cat);\r\n            }\r\n        })\r\n        setSearchRes(res);\r\n    }\r\n\r\n    const handleChangeCat = (selectedOption) => {\r\n        let res = []\r\n        list.forEach(cat => {\r\n            if (cat.name === selectedOption.value) {\r\n                res.push(cat);\r\n            }\r\n        })\r\n        setSearchRes(res);\r\n    }\r\n\r\n    const handleChangeCategory = (selectedOption) => {\r\n        setChoice(selectedOption.value);\r\n    }\r\n\r\n    layoutCounter = 0;\r\n\r\n    return (\r\n        <NativeBaseProvider>\r\n            <ScrollView centerContent=\"true\">\r\n                <Text style={styles.header}> Find a cat breed by typing a breed name</Text>\r\n                <Input placeholder=\"Search\" variant=\"filled\" width=\"100%\" borderRadius=\"10\" py=\"1\" px=\"2\" InputLeftElement={<Icon ml=\"2\" size=\"4\" color=\"gray.400\" as={<Ionicons name=\"ios-search\" />} />} />\r\n                <Box m={2}>\r\n                    {list.map((cat) => (\r\n                        <Box bg=\"white\" shadow={2} rounded=\"lg\" m={3}>\r\n                            <HStack>\r\n                                <Image resizeMode=\"cover\" rounded=\"lg\"\r\n                                    source={{\r\n                                        uri: `https://cdn2.thecatapi.com/images/${cat.reference_image_id}.jpg`\r\n                                    }}\r\n                                    alt={`a ${cat.name} cat`} size=\"xl\" />\r\n                                <Center>\r\n                                    <VStack mx={2}>\r\n                                        <Heading size=\"md\">{cat.name}</Heading>\r\n                                        <Heading size=\"sm\">{cat.origin}</Heading>\r\n                                    </VStack>\r\n                                </Center>\r\n                            </HStack>\r\n                        </Box>\r\n                    )\r\n                    )}\r\n                </Box>\r\n            </ScrollView>\r\n        </NativeBaseProvider>\r\n    );\r\n}\r\n\r\n\r\n//TODO:\r\n//  Logger functionality (detect when you add it to the list)\r\n// function Event(props) {\r\n//     const [, , addEvent] = useLoggerContext();\r\n\r\n//     return <Text onPress={() => addEvent(props.event)} style={styles.event}>\r\n//         {props.event}\r\n//     </Text>\r\n// }\r\n\r\n// function EventList(props) {\r\n//     return (\r\n//         <View>\r\n//             {props.events.map(x => (\r\n//                 <Event event={x.event} key={x.event} />\r\n//             ))}\r\n//         </View>\r\n//     );\r\n// }\r\n\r\nconst styles = StyleSheet.create({\r\n    container: { flex: 1 },\r\n    event: {\r\n        backgroundColor: \"green\",\r\n        textAlign: \"center\",\r\n        padding: 5,\r\n        borderRadius: 10,\r\n        margin: 2,\r\n    },\r\n    header: {\r\n        textAlign: \"center\",\r\n        marginVertical: 4,\r\n    },\r\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}